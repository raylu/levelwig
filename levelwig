#!/usr/bin/env python3

import datetime
import functools
import getpass
import mimetypes
import os
from os import path
import re
import sys

import misaka
from pigwig import PigWig, Response
from pigwig.exceptions import HTTPException

import cleancss
import db
import gen

levelwig_dir = path.normpath(path.dirname(path.abspath(__file__)))
template_dir = path.join(levelwig_dir, 'templates')
css_dir = path.join(levelwig_dir, 'css')
media_dir = path.join(levelwig_dir, 'media')
mode = 'prod'

LOGIN_TIME = datetime.timedelta(days=30)

def routes():
	return [
		('GET', '/', root),
		('GET', '/post/<id>', get_post),
		('GET', '/post/<id>/<slug>', get_post),
		('GET', '/media/<path:relpath>', media),
		('GET', '/css/<path:relpath>', css),
		('GET', '/feed.atom', get_feed),
		('GET', '/admin/login', login_form),
		('POST', '/admin/login', login),
		('GET', '/admin/logout', logout),
		('GET', '/admin', admin_root),
		('GET', '/admin/settings', admin_settings_form),
		('POST', '/admin/settings', admin_settings),
		('GET', '/admin/users', admin_users_form),
		('POST', '/admin/users', admin_user_create),
		('POST', '/admin/users/password', admin_user_password),
		('POST', '/admin/users/<del_username>/delete', admin_user_delete),
		('GET', '/admin/post', admin_post_form),
		('POST', '/admin/post', admin_post),
		('GET', '/admin/post/<id>/edit', admin_post_edit_form),
		('POST', '/admin/post/<id>/edit', admin_post_edit),
		('POST', '/admin/post/<id>/draft', admin_post_draft),
		('GET', '/admin/post/<id>/delete', admin_post_delete_form),
		('POST', '/admin/post/<id>/delete', admin_post_delete),
		('GET', '/admin/media', admin_media),
		('POST', '/admin/media/upload', admin_media_upload),
		('POST', '/admin/media/delete', admin_media_delete),
		('GET', '/admin/generate', admin_generate),
	]

def root(request):
	posts = db.iter_posts(allowed_flags=0)
	return Response.render(request, 'root.jinja2', {'posts': posts})

def get_post(request, id, slug=None):
	post = db.get_post(id, allowed_flags=db.PostFlag.draft)
	if post is None:
		raise HTTPException(404, 'invalid post id')
	return Response.render(request, 'post.jinja2', {'post': post})

def media(request, relpath):
	def gen_file():
		with open(path.join(media_dir, relpath), 'rb') as f:
			while True:
				buf = f.read(4096)
				if not buf:
					break
				yield buf
	return Response(gen_file(), content_type=mimetypes.guess_type(relpath)[0])

def css(request, relpath):
	name, _ = path.splitext(relpath)
	ccss_path = path.join(css_dir, name) + '.ccss'
	try:
		with open(ccss_path, 'r') as f:
			return Response(cleancss.convert(f), content_type='text/css')
	except FileNotFoundError:
		raise HTTPException(404, 'ccss file not found')

def get_feed(request):
	return Response(gen.get_feed(md), content_type='application/atom+xml')

def login_form(request):
	return Response.render(request, 'login.jinja2', {})

def login(request):
	try:
		username = request.body['username']
		password = request.body['password']
	except KeyError:
		raise HTTPException(400, 'username or password missing')
	if not db.check_login(username, password):
		raise HTTPException(401, 'incorrect username or password')
	response = Response(code=303, location='/admin')
	response.set_secure_cookie(request, 'username', username, max_age=LOGIN_TIME)
	return response

def logout(request):
	response = Response(code=303, location='/')
	response.set_cookie('username', '', max_age=datetime.timedelta(seconds=-1))
	return response

def authed(f):
	@functools.wraps(f)
	def wrapper(request, **kwargs):
		username = request.get_secure_cookie('username', LOGIN_TIME)
		if not username:
			return Response(code=303, location='/admin/login')
		return f(request, username, **kwargs)
	return wrapper

@authed
def admin_root(request, username):
	posts = db.iter_posts(allowed_flags=db.PostFlag.draft)
	return Response.render(request, 'admin.jinja2', {'posts': posts})

@authed
def admin_settings_form(request, username):
	return Response.render(request, 'settings.jinja2', {'settings': db.iter_settings()})

@authed
def admin_settings(request, username):
	for key, _ in db.iter_settings():
		if key not in request.body:
			raise HTTPException(400, key + ' missing')
	if request.body['url'][-1] == '/':
		raise HTTPException(400, 'url should not end with /')

	for key, old_val in db.iter_settings():
		new_val = request.body[key]
		if old_val != new_val:
			db.update_setting(key, new_val)
			app.template_engine.jinja_env.globals[key] = new_val
	return Response(code=303, location='/admin')

@authed
def admin_users_form(request, username):
	return Response.render(request, 'users.jinja2', {'users': db.iter_users()})

@authed
def admin_user_create(request, username):
	try:
		new_username = request.body['username']
		password = request.body['password']
	except KeyError:
		raise HTTPException(400, 'username or password missing')
	db.create_user(new_username, password)
	return Response(code=303, location='/admin/users')

@authed
def admin_user_password(request, username):
	try:
		old_password = request.body['old_password']
		new_password1 = request.body['new_password1']
		new_password2 = request.body['new_password2']
	except KeyError:
		raise HTTPException(400, 'old_password, new_password1, or new_password2 missing')
	if new_password1 != new_password2:
		raise HTTPException(400, 'new passwords did not match')
	result = db.change_password(username, old_password, new_password1)
	if not result:
		raise HTTPException(400, 'old password was incorrect')
	return Response(code=303, location='/admin/users')

@authed
def admin_user_delete(request, username, del_username):
	db.delete_user(del_username)
	return Response(code=303, location='/admin/users')

@authed
def admin_post_form(request, username):
	return Response.render(request, 'new_post.jinja2', {})

@authed
def admin_post(request, username):
	try:
		title = request.body['title']
		body = request.body['body'].replace('\r\n', '\n')
	except KeyError:
		raise HTTPException(400, 'title or body missing')
	db.create_post(username, title, body)
	if mode == 'prod':
		gen.generate(app)
	return Response(code=303, location='/admin')

@authed
def admin_post_edit_form(request, username, id):
	post = db.get_post(id, db.PostFlag.draft)
	return Response.render(request, 'edit.jinja2', {'post': post})

@authed
def admin_post_edit(request, username, id):
	try:
		title = request.body['title']
		date = request.body['date']
		author = request.body['author']
		body = request.body['body'].replace('\r\n', '\n')
	except KeyError:
		raise HTTPException(400, 'title, body, or date missing')
	db.update_post(id, title, date, author, body)
	if mode == 'prod':
		gen.generate(app)
	return Response(code=303, location='/admin/post/%s/edit' % id)

@authed
def admin_post_delete_form(request, username, id):
	post = db.get_post(id, db.PostFlag.draft)
	return Response.render(request, 'delete.jinja2', {'post': post})

@authed
def admin_post_delete(request, username, id):
	db.toggle_post_flag(id, db.PostFlag.deleted, True)
	if mode == 'prod':
		gen.generate(app)
	return Response(code=303, location='/admin')

@authed
def admin_post_draft(request, username, id):
	try:
		status = bool(int(request.body['status']))
	except (KeyError, ValueError):
		raise HTTPException(400, 'invalid status')
	db.toggle_post_flag(id, db.PostFlag.draft, status)
	if mode == 'prod':
		gen.generate(app)
	return Response(code=303, location='/admin')

@authed
def admin_media(request, username):
	files = os.listdir(media_dir)
	return Response.render(request, 'media.jinja2', {'files': files})

@authed
def admin_media_upload(request, username):
	uploaded = request.body['file']
	base, ext = path.splitext(uploaded.filename)
	sanitized_name = slugify(base) + ext
	filepath = path.join(media_dir, sanitized_name)
	if path.exists(filepath):
		raise HTTPException(400, 'file already exists')

	with open(filepath, 'wb') as f:
		f.write(uploaded.data)
	return Response(code=303, location='/admin/media')

@authed
def admin_media_delete(request, username):
	filename = request.body['file']
	os.unlink(path.join(media_dir, filename))
	return Response(code=303, location='/admin/media')

@authed
def admin_generate(request, username):
	gen.generate(app)
	return Response(code=303, location='/admin')

disallowed_chars_re = re.compile(r'[^\w\s-]')
dash_chars_re = re.compile(r'[-\s]+')
def slugify(title):
	r = title.casefold()
	r = disallowed_chars_re.sub('', r)
	return dash_chars_re.sub('-', r)

misaka_renderer = misaka.HtmlRenderer()
md = misaka.Markdown(misaka_renderer, misaka.EXT_AUTOLINK | misaka.EXT_FENCED_CODE |
		misaka.EXT_STRIKETHROUGH | misaka.EXT_SUPERSCRIPT | misaka.EXT_FOOTNOTES |
		misaka.EXT_NO_INTRA_EMPHASIS)

def init_settings():
	db.default_setting('title', 'blog')
	db.default_setting('url', 'http://localhost:8000')
	for key, val in db.iter_settings():
		jinja_env.globals[key] = val

app = PigWig(routes, template_dir=template_dir, cookie_secret=db.cookie_secret())
jinja_env = app.template_engine.jinja_env
jinja_env.filters['slug'] = slugify
jinja_env.filters['markdown'] = md
init_settings()
if not os.path.exists(media_dir):
	os.mkdir(media_dir)

def main():
	global mode
	try:
		mode = sys.argv[1]
	except IndexError:
		print_help()
		return

	if not db.has_users():
		print('time to create your blogwig user!')
		username = input('username: ')
		password = getpass.getpass('password: ')
		db.create_user(username, password)

	port = 8000
	if len(sys.argv) == 3:
		port = int(sys.argv[2])
	if mode == 'dev':
		app.main(port=port)
	elif mode == 'prod':
		import eventlet
		import eventlet.wsgi
		eventlet.wsgi.server(eventlet.listen(('localhost', port)), app)
	elif mode == 'gen':
		gen.generate(app)
	else:
		print_help()

def print_help():
	print('usage %s [dev|prod|gen]' % sys.argv[0])
	print()
	print('\tdev: auto-reloading wsgiref server')
	print('\tprod: eventlet wsgi server')
	print('\tgen: generate static content into public/')
	print()
	print('on first run, you will be prompted to create a user and password')

if __name__ == '__main__':
	main()
